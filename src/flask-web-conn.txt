from threading import Thread
# third-party libs
from flask import Flask, request, jsonify

# thread smart contract deployment
t1 = Thread(target = wrapper_deploy_sc)
t1.start ()

# web server instantiation
app = Flask(__name__)

register_nodes ()
update_rep_scores ()




# web server HTTP API functions
@app.route('/update')
def update_reputation_score ():

    nodeid = int (request.args.get('id', None))
    reward = float (request.args.get('reward', None))

    cached_transaction_pool += ({ 'id': nodeid, 'reward': reward })

    if update_rep_finished:
        start_update_reputation_thread ()
        
    return jsonify ()


@app.route('/register')
def register_node ():

    name = str (request.args.get('name', None))

    while t1.is_alive ():
        continue

    t3 = Thread(target = wrapper_node_registration, args = (name,))
    t3.start ()

    while t3.is_alive ():
        continue

    return jsonify ('Node registration status: ' + str (cluster_nodes[-1]))


@app.route('/get_rep')
def get_reputation_score ():

    nodeid = int (request.args.get('id', None))

    for ele in cluster_nodes:
        if ele['id'] == nodeid:
            return jsonify (chain.get_reputation_score (nodeid))

    return jsonify (float ('nan'))




# main entrypoint
if __name__ == "__main__":

    app.run(host = '0.0.0.0', port = 5000, debug = True, use_reloader = False)